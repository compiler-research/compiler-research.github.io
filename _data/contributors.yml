- name: David J Lange
  info: Research Staff
  photo: Lange.png
  email: David.Lange@princeton.edu
  education: PhD Physics, University of California, Santa Barbara (1999).
  active: 1

- name: Vassil Vassilev
  info: Research Staff
  photo: Vassilev.jpg
  email: vvasilev@cern.ch
  education: PhD Computer Science, University of Plovdiv "Paisii Hilendarski", Plovdiv, Bulgaria (2015).
  www: "https://vassil.vassilev.info"
  github: ""
  linkedin: ""
  active: 1

- name: Alexander Penev
  info: Assoc. Prof.
  photo: Penev.png
  email: apenev@uni-plovdiv.bg
  education:  PhD Computer Science, University of Plovdiv “Paisii Hilendarski”, Plovdiv, Bulgaria (2013)
  active: 1

- name: Aaron Jomy
  photo: Aaron.jpg
  info: "Research Intern at CERN"
  email: aaronjomyjoseph@gmail.com
  education: "B. Tech in Computer Science, Manipal Institute of Technology, Manipal, India"
  active: 1
  projects:
    - title: "Improve robustness and performance of Cppyy by bringing it closer to LLVM"
      status: Ongoing
      description: |
        Developing CppInterOp, an interoperability mechanism between Python and C++ based on the interactive C++ technologies available in Clang and LLVM.
        This involves modernizing Cppyy, to use upstream LLVM’s Clang-REPL component as a runtime compiler.
        We also explore the added performance gain due to fewer dependencies, faster lookups as well as the expanded feature set that can be made available to Cppyy users on schedule with upstream Clang-REPL releases.
        The project aims to stabilize CppInterop with Clang-REPL and Cling, as well as develop its capabilities with template instantiation and lookups.
        Another aspect is exploring the optimizations of the current Python-C++ interoperability framework utilizing Numba.
        Numba allows Python users to Just-In-Time compile subsets of mixed Python-C++ code into machine code which can accelerate codebases that use cppyy by 20 times.
        Current research aims to expand capabilities to enable users to leverage CUDA C++ code in Python and subsequently utilize Numba for its JIT compilation.
      mentors: Vassil Vassilev, Wim Lavrijsen(LBNL)
    - title: "Extend the Cppyy support in Numba"
      status: Completed
      description: |
        Numba is a JIT compiler that translates a subset of Python and NumPy code into fast machine
        code. Cppyy is an automatic, run-time, Python-C++ bindings generator, for calling C++ from
        Python and Python from C++.
        Cppyy has to pay a time penalty each time it needs to switch between languages which can
        multiply into large slowdowns when using loops with cppyy objects. This is where Numba can
        help. Since Numba compiles the code in loops into machine code it only has to cross the
        language barrier once and the loops thus run faster.
        Initial support for Cppyy objects in Numba enabled the use of builtin types and classes, but
        some essential C++ features, such as references and STL classes, are not yet supported.
        The project aims to add support for C++ reference types in Numba through Cppyy and improve
        the existing numba extension implementation to provide general support for C++ templates.
        This added support will allow cppyy users to define a wider array of standard and templated
        functions that can leverage reference types to the C++ code defined in python.
      mentors: Baidyanath Kundu, Vassil Vassilev, Wim Lavrijsen(LBNL)
      proposal: /assets/docs/Aaron_Jomy_Proposal_2023.pdf
      report: |
        [Final Report](/assets/docs/Aaron_Jomy_GSoC23_Report.pdf)

- name: Vaibhav Thakkar
  photo: Vaibhav.jpg
  info: "Research Intern at CERN, Google Summer of Code 2023 Contributor"
  email: vaibhav.thakkar.22.12.99@gmail.com
  education: "Electrical Engineering and Computer Science, Indian Institute of Technology, Kanpur, India"
  active: 1
  projects:
    - title: "Add support for pointers in reverse mode AD in Clad"
      status: Ongoing
      description: |
        In mathematics and computer algebra, automatic differentiation (AD) is a set of techniques
        to numerically evaluate the derivative of a function specified by a computer program.
        Automatic differentiation is an alternative technique to Symbolic differentiation and
        Numerical differentiation (the method of finite differences).
        Clad is based on Clang which provides the necessary facilities for code transformation.
        The AD library is able to differentiate non-trivial functions, to find a partial derivative
        for trivial cases and has good unit test coverage.
        Clad currently supports differentiation with respect to single-dimensional arrays but has
        limited support for pointers in reverse mode AD. This project aims to add support for
        pointers in Clad.
      mentors:  Vassil Vassilev, David Lange

    - title: "Implement vector mode in forward mode automatic differentiation in Clad"
      status: Completed
      description: |
        Clad is an automatic differentiation library based on Clang which provides the
        necessary facilities for code transformation.
        Automatic Differentiation (AD) is a set of techniques to numerically evaluate the
        derivative of a function specified by a computer program.
        Automatic differentiation is an alternative technique to Symbolic differentiation and
        Numerical differentiation (the method of finite differences).
        Vector mode support will facilitate the computation of gradients using the forward
        mode AD in a single pass and thus without explicitly performing differentiation n times
        for n function arguments.
        The major benefit of using vector mode is that computationally expensive operations
        do not need to be recomputed n times for n function arguments.
      mentors:  Parth Arora, Vassil Vassilev, David Lange, Alexander Penev
      proposal: /assets/docs/Vaibhav_Thakkar_Proposal_2023.pdf
      report: |
        [Final Report](/assets/docs/Vaibhav_Thakkar_GSoC23_Report.pdf)

- name: QuillPusher
  info: "Technical Writer, Google Season of Docs 2023 contributor"
  active: 1
  email: 9x3qly27@anonaddy.me
  education: "Bachelors Degree in Science (BS)"
  github: "https://github.com/QuillPusher"
  projects:
    - title: "Interactive Programming Documentation for  Data Science"
      status: Ongoing
      description: |
        Revamp of Clang-Repl, Xeus-Clang-Repl and libInterOp documentation. The idea is to disambiguate these technologies, both for advanced users (that are interested in adopting or contributing to components), and for newcomers (that are interested in learning what these technologies have to offer). Initially, this may include a high-level orientation of the delivered technologies, existing features' timeline,  and planned features' highlights for visibility and early feedback. Over time, existing documentation may be restructured and rewritten to make it more accessible. Missing features may be identified and documented.
      proposal: /assets/docs/QuillPusher_GSoD2023.pdf
      mentors: Vassil Vassilev, David Lange

- name: Petro Zarytskyi
  info: "IRIS-HEP Fellow"
  photo: Petro.jpg
  email: petro.zarytskyi@gmail.com
  education: Applied Mathematics, Taras Shevchenko National University of Kyiv, Ukraine, 2021-present
  active: 1
  projects:
    - title: "Optimizing reverse-mode automatic differentiation with advanced activity-analysis"
      status: Ongoing
      description: |
        Clad is an automatic differentiation clang plugin for C++. It automatically
        generates code that computes derivatives of functions given by the user.
        Clad can work in two main modes: forward and reverse. The reverse mode involves
        computing the derivative by applying the chain rule to all the elementary operations
        from the result to the argument. It turns out to be more
        efficient when there are more dependent output variables than independent
        input variables (e.g. calculating a gradient). However, the approach to blindly
        compute the derivatives of all the intermediate variables obviously produces
        code that does a lot of unnecessary calculations. With advanced activity analysis,
        the variables which are not used to compute the result can be found and removed,
        increasing the time- and memory- efficiency of the output code.
      proposal: /assets/docs/Petro_Zarytskyi_Proposal.pdf
      mentors: Vassil Vassilev, David Lange

- name: "Pavlo Svirin"
  info: "Senior research engineer at the Barcelona Supercomputing Center"
  photo: pavlo_svirin.png
  email: pavlo.svirin@cern.ch
  education: PhD Computer Science, National Technical University of Ukraine, 2014
  active: 1
      
- name: Isaac Morales Santana
  info: "GSoC 2024 Contributor"
  photo: Isaac.jpg
  email: isaacmoralessantana@gmail.com
  github: "https://github.com/imorlxs"
  active: 1
  linkedin: "https://www.linkedin.com/in/isaac-morales-santana-724280203/"
  education: "Computer Engineering, University of Granada, Spain"
  projects:
    - title: "Improving performance of BioDynaMo using ROOT C++ Modules"
      status: Ongoing
      description: |
        The ROOT is a framework for data processing, born at CERN, at the heart of the research on high-energy physics. Every day, thousands of physicists use ROOT applications to analyze their data or to perform simulations. The ROOT software framework is foundational for the HEP ecosystem, providing capabilities such as IO, a C++ interpreter, GUI, and math libraries. It uses object-oriented concepts and build-time modules to layer between components. We believe additional layering formalisms will benefit ROOT and its users.

        BioDynaMo is an agent-based simulation platform that enables users to perform simulations of previously unachievable scale and complexity, making it possible to tackle challenging scientific research questions. The project has a wide range of applications in cancer research, epidemiology, and social sciences.

        BioDynaMo incorporates ROOT for several crucial functionalities such as statistical analysis, random number generation, C++-based Jupyter notebooks, and IO. Some features rely on efficient reflection information about BioDynaMo’s and user-defined C++ classes. This project is about improving the performance of the reflection system by upgrading to C++ modules.

      proposal: /assets/docs/Isaac_Morales-Proposal_2024.pdf
      mentors: Vassil Vassilev, Lukas Breitwieser, Tobias Duswal and Fons Rademakers

- name: "Chaitanya Shahare"
  photo: Chaitanya-Shahare.jpeg
  info: "GSoC 2024 Contributor"
  email: shaharechaitanya3@gmail.com
  education: "B.Tech in Mechanical Engineering, National Institute of Technology Srinagar, India"
  github: "https://github.com/Chaitanya-Shahare"
  www: "https://chaitanyashahare.com"
  active: 1
  linkedin: "https://www.linkedin.com/in/cs03"
  projects:
    - title: "LLVM.org website redesign"
      status: Ongoing
      description: |
        Revamping the LLVM.org Website: Modernizing the central hub for LLVM project
        information. Enhancing navigation, content discoverability, and usability for
        both new users and existing community members. Utilizing static site
        generators, like Hugo, for efficiency and scalability. Separating data and
        visualization using YAML and Markdown for easier content management. Engaging
        the community for feedback and collaboration throughout the redesign process.
      proposal: /assets/docs/Chaitanya_Shahare_Proposal_2024.pdf
      mentors: Tanya Lattner, Vassil Vassilev
      
- name: "Riya Bisht"
  photo: Riya-Bisht.jpeg
  info: "Google Summer Of Code 2024 Contributor"
  email: manasi.riya2003@gmail.com
  education: "B.Tech in Computer Science Engineering, Graphic Era University, India"
  github: "https://github.com/chococandy63"
  www: "https://riyabisht.com/about/"
  active: 1
  linkedin: "https://www.linkedin.com/in/riya-bisht-81b365196/"
  projects:
    - title: "Enable CUDA compilation on Cppyy-Numba generated IR"
      status: Ongoing
      description: |
        Cppyy is an automatic, run-time, Python-C++ binding generator, for calling C++ from Python and Python from C++. 
        Initial support has been added that allows Cppyy to hook into the high-performance Python compiler, Numba which
        compiles looped code containing C++ objects/methods/functions defined via Cppyy into fast machine code. The 
        project aims to enhance Cppyy, by enabling CUDA compilation on Numba-generated intermediate representation (IR). 
        This integration will allow seamless utilization of CUDA paradigms in Python without compromising performance. 
        The objectives includes adding support for Cppyy-defined CUDA Code i.e. implementing support for declaration and 
        parsing of CUDA code defined in Cppyy within the Numba extension. Designing and developing a CUDA compilation 
        mechanism and execution within the Cppyy-Numba environment.
      proposal: /assets/docs/Riya_Bisht_GSoC2024_Proposal.pdf
      mentors: Vassil Vassilev, Wim Lavrijsen, Aaron Jomy, Jonas Rembser

- name: "Atell Yehor Krasnopolski"
  photo: Atell.jpg
  info: "GSoC 2024 Contributor"
  email: delta_atell@protonmail.com
  education: "Mathematics, University of Wuerzburg, Germany"
  github: "https://github.com/gojakuch"
  www: "https://atell.neocities.org/"
  active: 1
  projects:
    - title: "Implement Differentiating of the Kokkos Framework in Clad"
      status: Ongoing
      description: |
        The goal is to implement the differentiation of the Kokkos framework including the support of Kokkos functors, lambdas, methods such as parallel_for, parallel_reduce, and deep_copy, as well as the general support for Kokkos view data structures. The set-off points for the project should be the existing "Kokkos-aware Clad" PR and the test cases I have developed. The additional aim of the project is to implement a generic approach to support any C++ library (starting with Kokkos) in such a way that the core of Clad is invariant to the internals of the library, but any Clad user can add it in a pluggable format for individual use cases.
      proposal: /assets/docs/Atell_Krasnopolsky_Proposal_2024.pdf
      mentors: Vassil Vassilev, Vaibhav Thakkar, Petro Zarytskyi

- name: Khushiyant
  photo: Khushiyant.jpg
  info: "Research Intern, GSoC 2024 Contributor"
  email: khushiyant2002@gmail.com
  education: "B.Tech in Computer Science and Engineering, G.G.S.I.P.U, India"
  github: "https://github.com/Khushiyant"
  www: "https://bento.me/khushiyant"
  linkedin: "https://www.linkedin.com/in/khushiyant/"
  active: 1
  projects:
    - title: "STL/Eigen - Automatic conversion and plugins for Python based ML-backends"
      status: Ongoing
      description: |
            Cppyy is an automatic, run-time, Python-C++ bindings generator, for calling C++ from Python and Python from C++. 
            Cppyy uses pythonized wrappers of useful classes from libraries like STL and Eigen that allow the user to utilize them on the Python side. 
            Current support follows container types in STL like std::vector, std::map, and std::tuple and the Matrix-based classes in Eigen/Dense. 
            These cppyy objects can be plugged into idiomatic expressions that expect Python builtin-types. 
            This behaviour is achieved by growing pythonistic methods like __len__ while also retaining its C++ methods like size.
            Efficient and automatic conversion between C++ and Python is essential towards high-performance cross-language support. 
            This approach eliminates overheads arising from iterative initialization such as comma insertion in Eigen. 
            This opens up new avenues for the utilization of Cppyy’s bindings in tools that perform numerical operations for transformations, or optimization.
            The on-demand C++ infrastructure wrapped by idiomatic Python enables new techniques in ML tools like JAX/CUTLASS. 
            This project allows the C++ infrastructure to be plugged into at service to the users seeking high-performance library primitives that are unavailable in Python.

      mentors: Vassil Vassilev, Wim Lavrijsen, Aaron Jomy, Jonas Rembser
      proposal: /assets/docs/Khushiyant_Proposal_2024.pdf

- name: "Tharun Anandh"
  photo: tharun_a.jpg
  info: "GSoC 2024 Contributor"
  email: atharun05@gmail.com
  education: "B.Tech in Computer Science and Engineering, National Institute of Technology, Tiruchirapalli, Tamil Nadu, India"
  github: "https://github.com/tharun571"
  active: 1
  linkedin: "https://www.linkedin.com/in/tharun-anandh-8b624b199/"
  projects:
    - title: "Integrate a Large Language Model with the xeus-cpp Jupyter kernel"
      status: Ongoing
      description: |
        Xeus-cpp, a Jupyter kernel for C++, is built upon the native implementation of the Jupyter protocol, xeus. This setup empowers users to interactively write and execute C++ code, providing immediate visibility into the results.With its REPL (read-eval-print-loop) functionality, users can rapidly prototype and iterate without the need to compile and run separate C++ programs. Additionally, this integration facilitates seamless interaction between C++ and Python within the same Jupyter environment. With the ever growing popularity of large language models, this project aims to integrate a large language model with the xeus-cpp Jupyter kernel. This integration will enable users to interactively generate and execute code in C++ leveraging the assistance of the language model.
      proposal: /assets/docs/TharunA_GSoC_Proposal_2024-Xeus-Cpp.pdf
      mentors: Anutosh Bhat, Johan Mabille, Aaron Jomy, David Lange, Vassil Vassilev

- name: Thomas Fransham
  info: "GSoC 2024 Contributor"
  email: tfransham@gmail.com
  github: "https://github.com/fsfod"
  active: 1
  projects:
    - title: "Support clang plugins on Windows"
      status: Ongoing
      description: |
        This project aims to allow using dynamically loaded Clang plugins on windows by adding 
        support for building LLVM and Clang as shared libraries on Windows with all the 
        public c++ API exported and dynamically linking to them. Part of the process will be 
        automated with a tool built using the Clang tooling API to automatically add export macros
        on the appropriate class and functions declarations in llvm public headers.
      proposal: /assets/docs/Thomas_Fransham_GSoC24_Proposal.pdf
      mentors: Vassil Vassilev, Saleem Abdulrasool

- name: Mihail Mihov
  photo: mihail-mihov.jpg
  info: "GSoC 2024 Contributor"
  email: mihovmihailp@gmail.com
  github: "https://github.com/mihailmihov"
  active: 1
  projects:
    - title: "Add support for consteval and constexpr functions in clad"
      status: Ongoing
      description: |
        In mathematics and computer algebra, automatic differentiation (AD) is a set of techniques to numerically evaluate the derivative of a function specified by a computer program. Automatic differentiation is an alternative technique to Symbolic differentiation and Numerical differentiation (the method of finite differences). Clad is based on Clang which provides the necessary facilities for code transformation. The AD library can differentiate non-trivial functions, to find a partial derivative for trivial cases and has good unit test coverage.

        C++ provides the specifiers consteval and constexpr to allow compile time evaluation of functions. constexpr declares a possibility, i.e the function will be evaluated at compile time if possible, else at runtime; whereas consteval makes it mandatory, i.e every call to the function must produce a compile-time constant.

        The aim of this project is to ensure that same semantics are followed by the generated derivative function, i.e if the primal function is evaluated at compile time (because of constexpr or consteval specifier), then the generated derivative code should also have the same specifier to be evaluatable at compile time.

        This will enable clad to demonstrate the benefits of doing automatic differentiation directly on C++ frontend to utilize the benefits of clang’s infrastructure.
      proposal: /assets/docs/Mihail_Mihov_GSoC24_Proposal.pdf
      mentors: Vaibhav Thakkar, Petro Zaritskyi, Vassil Vassilev

- name: Matthew Barton
  info: "Open Source Contributor"
  photo: Matthew.jpg
  education: PhD Theoretical Nuclear Physics, University of Surrey (2018)
  active: 1

- name: "This could be you!"
  photo: rock.jpg
  info: See <a href="/vacancies">openings</a> for more info
  email: vvasilev@cern.ch
  active: 1

################################################################################
#                                     2024                                     #
################################################################################

- name: Shreyas Atre
  photo: Shreyas.jpg
  info: "Open Source Contributor"
  email: shreyasatre16@gmail.com
  education: "B.Tech in Electronics and Telecommunications Engineering, Veermata Jijabai Technological Institute, Mumbai, India | Masters in Computer Science, Louisiana State University, Baton Rouge, United States"
  github: "https://github.com/SAtacker"
  www: "https://satacker.github.io"
  linkedin: "https://www.linkedin.com/in/atreshreyas/"
  projects:
    - title: "Improve the test coverage for CppInterOp"
      status: Completed
      description: |
        This project aims to enhance the reliability and robustness of
        CppInterOp, a library facilitating language interoperability by
        exposing APIs from Clang and LLVM. Focusing on backward
        compatibility and minimalistic design, CppInterOp is instrumental
        in enabling downstream tools to embed Clang and LLVM in their
        codebases for dynamic interaction with C++. The project's primary
        objective is to improve the test coverage of CppInterOp by
        identifying and addressing potential edge cases, especially
        scenarios involving language interoperability and
        compiler-as-a-service functionalities. The outcome is expected to
        increase the overall reliability of the library, providing
        developers with a more stable foundation for utilizing CppInterOp
        in diverse scenarios. Previously I worked on improving the lookup
        of template specialization decls in clang modules.
      mentors:  Vassil Vassilev


- name: Abhi Acherjee
  info: "IRIS-HEP Fellow"
  photo: Abhi.jpg
  email: acherjan@mail.uc.edu
  education: "Computer Sciences B.S. + M.S , University of Cincinnati, OH"
  projects:
    - title: "Extend the Automatic Differentiation Support in RooFit"
      status: Completed
      description: |
        In terms of minimization time, Roofit offers faster results even with numerical
        differentiation techniques as compared to minimizing a likelihood function that
        is written by hand in C++, due its complex caching logic. Automatic differentiation
        gives an additional speedup and more accuracy and scalability for problems with large
        number of parameters. The purpose of this project will be to firstly use Minuit as
        an optimization algorithm with externally provided gradients, extend support to cover
        HistFactory and other parts of RooFit, and finally to optimize Clad generated derivatives a
        nd further explore how they can be parallelized (OpenMP or CUDA).

      proposal: /assets/docs/Abhigyan_Acherjee-Proposal_2023.pdf
      mentors: Vassil Vassilev, David Lange


- name: Ioana Ifrim
  info: Research Staff
  photo: Ifrim.jpg
  email: ioana.ifrim@cern.ch
  education: MPhil Advanced Computer Science, University of Cambridge (2018)



################################################################################
#                                     2023                                     #
################################################################################
- name: Smit Shah
  photo: Smit.jpeg
  info: "Google Summer of Code 2023 Contributor"
  email: ssmit1607@gmail.com
  education: "B.Tech in Computer Engineering, Veermata Jijabai Technological Institute, Mumbai, India"
  projects:
    - title: "Enable cross-talk between Python and C++ kernels in xeus-clang-REPL by using Cppyy"
      status: Completed
      description: |
         xeus-clang-REPL is a C++ kernel for Jupyter notebooks using clang-REPL as its C++ Interpreter. Cppyy is an automatic, run-time, Python-C++ bindings generator, for calling C++ from Python and Python from C++. Allowing C++ and Python to talk between themselves in a Jupyter notebook will allow users to switch between Python and C++ at will. This means that data analysts can set up their analysis in Python while running the actual analysis in C++. Thus reducing the time to write and debug their analysis pipeline. Initial support of cross talk between the two kernels has been implemented but this only supports passing primitive data types. This project aims to use Cppyy to extend this to support classes and functions.
      mentors:  Vassil Vassilev, Baidyanath Kundu
      proposal: /assets/docs/Smit_Proposal_2023.pdf

- name: Rishabh Bali
  photo: Rishabh.jpg
  info: "Open Source Contributor"
  email: rishabhsbali@gmail.com
  education: "B.Tech in Computer Engineering, Veermata Jijabai Technological Institute, Mumbai, India"
  projects:
    - title: "Add support for differentiating with respect to multidimensional arrays (or pointers) in Clad"
      status: Incomplete
      description: |
        Clad is an open-source clang plugin that enables the automatic differentiation of mathematical functions for C++.
        Currently clad supports differentiation w.r.t single dimensional arrays only; support for differentiation w.r.t
        pointers is also limited. This proposal aims to add support for differentiation w.r.t multi-dimensional
        arrays and pointers in clad.
      mentors:  Vassil Vassilev, Parth Arora
      proposal: /assets/docs/Rishabh_Bali_Proposal_2023.pdf

- name: Anubhab Ghosh
  photo: Anubhab_Ghosh.jpg
  info: "Research Intern, Google Summer of Code 2022 former contributor"
  email: anubhabghosh.me@gmail.com
  education: "Computer Science and Engineering, Indian Institute of Information Technology, Kalyani, India"
  projects:
    - title: "WebAssembly Support for clang-repl"
      status: Completed
      description: |
        WebAssembly is a technology that allows Javascript engines to execute
        compiled bytecode at close to native performance. The goal of the
        project is to add WebAssembly output support to clang-repl, a C++
        interpreter so it can run and execute code inside a web browser. This
        can be used through a tool like JupyterLite to provide in-browser C++
        notebooks.
      mentors: Vassil Vassilev, Alexander Penev
      proposal: /assets/docs/Anubhab_Ghosh_Proposal_2023_WASM.pdf
      report: |
        [Final Report](/assets/docs/Anubhab_Ghosh_GSoC2023_Report.pdf)

    - title: "Design and Develop a CUDA engine for clang-repl"
      status: Completed
      description: |
        CUDA is a GPGPU platform and API targeted towards NVIDIA GPUs that gives
        access to compute elements of the GPU through standard programming
        languages like C++. The goal of the project is to implement CUDA support
        for clang-repl that will be useful for interpreting CUDA C++ code. This
        would possibly require clang-repl to distinguish between host and device
        code and separately compile device code to PTX.
      mentors: Vassil Vassilev, David Lange
      proposal: /assets/docs/Anubhab_Ghosh_Proposal_2023_CUDA.pdf
    - title: "Shared Memory Based JITLink Memory Manager"
      status: Completed
      description: |
        When a separate executor process is used with LLVM JIT, the generated
        code needs to be transferred to the executor process which is done by
        the JITLinkMemoryManager. The current implementation uses
        ExecutorProcessControl API (an RPC scheme) to send the generated code
        which goes through pipes or network sockets. The goal of the project is
        to transfer it through an operating system provided shared memory
        regions for better performance, when both the JIT process and the
        executor process are sharing the same underlying physical memory. It
        should be done by allocating large chunks of memory and distributing it
        to reduce memory allocation and inter process communication overheads.
      mentors:  Vassil Vassilev, Stefan Gränitz, Lang Hames
      proposal: /assets/docs/Anubhab_Ghosh_Proposal_2022.pdf
      report: |
        [Final Report](/assets/docs/Anubhab_Ghosh_GSoC2022_Report.pdf)
        |
        [Blog post](/blogs/gsoc22_ghosh_experience_blog)

- name: Sunho Kim
  photo: Sunho_Kim.jpeg
  info: "Google Summer of Code 2023"
  email: ksunhokim123@gmail.com
  education: "B.S. in Computer Science, University of California San Diego"
  projects:
    - title: "Re-optimization using JITLink"
      status: Completed
      description: |
        In Just-In-Time compilers we often choose a low optimization level to
        minimize compile time and improve launch times and latencies, however
        some functions (which we call hot functions) are used very frequently
        and for these functions it is worth optimizing more heavily. In general
        hot functions can only be identified at runtime (different inputs will
        cause different functions to become hot), so the aim of the
        reoptimization project is to build infrastructure to (1) detect hot
        functions at runtime and (2) compile them a second time at a higher
        optimization level, hence the name "re-optimization". There are many
        possible approaches to both parts of this problem. E.g. hot functions
        could be identified by sampling, or using existing profiling
        infrastructure, or by implementing custom
        instrumentation. Reoptimization could be applied to whole functions, or
        outlining could be used to enable optimization of portions of
        functions. Re-entry into the JIT infrastructure from JIT’d code might be
        implemented on top of existing lazy compilation, or via a custom path.
      mentors: Vassil Vassilev, Stefan Gränitz, Lang Hames
      proposal: /assets/docs/Sunho_Kim_Proposal_2023.pdf
      report: |
        [Final Report](/assets/docs/Sunho_Kim_GSoC23_Report.pdf)
    - title: "Write JITLink support for a new format/architecture (ELF/AARCH64)"
      status: Completed
      description: |
        JITLink is LLVM’s new JIT linker API -- the low-level API that
        transforms compiler output (relocatable object files) into
        ready-to-execute bytes in memory. With its new architecture, it is able
        to support a variety of new features, which includes static initializer,
        thread local storage, and small code model, that were not possible in
        RuntimeDyld, the old JIT API.  JITLink’s generic linker algorithm needs
        to be specialized to support the target object format (COFF, ELF,
        MachO), and architecture (arm, arm64, i386, x86-64). This project aims
        to implement the JITLink specialization for ELF/aarch64 which is
        required to use JITLink in arm64 linux.
      mentors: Vassil Vassilev, Stefan Gränitz, Lang Hames
      proposal: /assets/docs/Sunho_Kim_Proposal_2022.pdf
      report: |
        [Final Report](/assets/docs/Sunho_Kim_GSoC22_Report.pdf)

- name: Krishna Narayanan
  photo: Krishna.jpg
  info: "Google Summer of Code 2023 Contributor"
  email: krishnanarayanan132002@gmail.com
  education: "B.Tech in Electronics and Telecommunications, Veermata Jijabai Technological Institute, Mumbai, India"
  projects:
    - title: "Tutorial development with clang-repl"
      status: Completed
      description: |
        This project aims to develop tutorials demostrating the current
        capabilities of clang-repl.  It also aims to investigate and research
        the requirements for adding clang-repl as a backend to xeus-cling.  Add
        support for Xeus with the newly added clang-repl which is inspired from
        cling. The need for clang-repl is that it presents opportunities for
        rigorous open source development.However even though it is inspired by
        cling, not all of clang-repl and cling are same i.e. they are similar
        but work needs to be done to add xeus protocol support for clang-repl.
      mentors:  Vassil Vassilev, David Lange
      proposal: /assets/docs/Krishna_Proposal_2023.pdf
      report: |
        [Final Report](/assets/docs/Krishna_Narayanan_GSoC23_Report.pdf)
- name: Daemond Zhang
  info: "Open Source Contributor"
  email: daemondzh@gmail.com
  education: "Computer Sciences B.E, Tsinghua University"
  projects:
    - title: "Improve automatic differentiation of object-oriented paradigms using Clad"
      status: Completed
      description: |
        I would like to apply for the Improve automatic differentiation of
        object-oriented paradigms using Clad project.  This project is mainly
        focused on supporting object-oriented programming features in clad,
        including several milestones such as differentiation of constructors,
        differentiation of operator overloads, reference class members, and
        custom derivatives for object-oriented constructs.  It's valuable as no
        other AD system has done this before, and thus is experimental.
      mentors:  Vassil Vassilev, Parth Arora, Alexander Penev
      proposal: /assets/docs/Daemond_Zhang_Proposal_2023.pdf
      report: |
        [Final Report](/assets/docs/Daemond_Zhang_GSoC23_Report.pdf)

- name: "Garima Singh"
  photo: Garima_Singh.jpg
  info: "Research Intern at CERN"
  email: garimasingh0028@gmail.com
  education: "B. Tech in Information Technology, Manipal Institute of Technology, Manipal, India"
  projects:
    - title: "Add Automatic Differentiation to RooFit"
      status: Complete
      description: |
        RooFit is a toolkit for statistical modeling and fitting used by most
        experiments in particle physics. Just as data sets from next-generation
        experiments grow, processing requirements for physics analysis become
        more computationally demanding, necessitating performance optimizations
        for RooFit. One possibility to speed-up minimization and add stability
        is the use of automatic differentiation (AD). Unlike for numerical
        differentiation, the computation cost scales linearly with the number of
        parameters, making AD particularly appealing for statistical models with
        many parameters. The goal of this project is to add preliminary support
        for AD in RooFit and develop benchmarks to demonstrate the advantages of
        AD for large statistical fits using RooFit.
      mentors:  Vassil Vassilev, David Lange

    - title: "Add Numerical Differentiation Support in Clad"
      status: Completed
      description: |
        In mathematics and computer algebra, automatic differentiation (AD) is a
        set of techniques to numerically evaluate the derivative of a function
        specified by a computer program. Automatic differentiation is an
        alternative technique to Symbolic differentiation and Numerical
        differentiation (the method of finite differences). Clad is based on
        Clang which provides the necessary facilities for code
        transformation. The AD library can differentiate non-trivial functions,
        find a partial derivative for trivial cases, and has good unit test
        coverage.  In several cases, due to different limitations, it is either
        inefficient or impossible to differentiate a function. For example, clad
        cannot differentiate declared-but-not-defined functions. In that case,
        it issues an error. Instead, clad should fall back to its future
        numerical differentiation facilities.
      proposal: /assets/docs/Garima_Singh_Proposal_2021.pdf
      mentors:  Vassil Vassilev, Alexander Penev
      report: |
        [Final Report](/assets/docs/Garima_Singh_GSoC21_Report.pdf)

    - title: "Floating point error evaluation with Clad"
      status: Completed
      description: |
        Floating-point estimation errors have been a testament to the finite
        nature of computing. Moreover, the predominance of Floating-point
        numbers in real-valued computation does not help that fact. Float
        computations are highly dependent on precision, and in most cases, very
        high precision calculation is not only not possible but very
        inefficient. Here, one has no choice but to resort to lower precision
        computing, which in turn is quite prone to errors. These errors result
        in inaccurate and sometimes catastrophic results; hence, it is
        imperative to estimate these errors accurately. This project aims to use
        Clad, a source transformation AD tool for C++ implemented as a plugin
        for the C++ compiler Clang, to develop a generic error estimation
        framework that is not bound to a particular error approximation
        model. It will allow users to select their preferable estimation logic
        and automatically generate functions augmented with code for the
        specified error estimator.
      proposal: /assets/docs/Garima_Singh_Proposal_2020.pdf
      mentors: Vassil Vassilev, David Lange
      report: |
        [GSoC 2020 Archive](https://summerofcode.withgoogle.com/archive/2020/projects/6406031539699712/){:target="_blank"}

- name: "Baidyanath Kundu"
  photo: Baidyanath.png
  info: 'Utilize second order derivatives from Clad in ROOT'
  email: kundubaidya99@gmail.com
  education: "B. Tech in Computer Science and Engg., Manipal Institute of Technology, Manipal, India"
  info: "Research Intern at CERN"
  projects:
    - title: "Improving Cling Reflection for Scripting Languages"
      status: Completed
      description: |
        Cling has basic facilities to make queries about the C++ code that it
        has seen/collected so far.  These lookups assume, however, that the
        caller knows what it is looking for and the information returned,
        although exact, usually only makes sense within C++ and is thus often
        too specific to be used as-is. A scripting language, such as Python,
        that wants to make use of such lookups by name, is forced to loop over
        all possible entities (classes, functions, templates, enums, …)  to find
        a match. This is inefficient. Furthermore, many lookups will be
        multi-stage: a function, but which overload? A template, but which
        instantiation? A typedef, of what? The current mechanism forces the
        scripting language to provide a type-based match, even where C++ makes
        distinctions (e.g. pointer v.s. reference) that do not exist in the
        scripting language. This, too, makes lookups very inefficient. The
        returned information, once a match is found, is exact, but because of
        its specificity, requires the caller to figure out C++ concepts that
        have no meaning in the scripting language. E.g., there is no reason for
        Python to consider an implicitly instantiated function template
        different from an explicitly instantiated one.
      mentors: Wim Lavrijsen, Vassil Vassilev

    - title: "Utilize second order derivatives from Clad in ROOT"
      status: Completed
      description: |
        ROOT is a framework for data processing, born at CERN, at the heart of
        the research on high-energy physics.  ROOT has a clang-based C++
        interpreter Cling and integrates with the automatic differentiation
        plugin Clad to enable flexible automatic differentiation
        facility. TFormula is a ROOT class which bridges compiled and
        interpreted code. This project aims to add second order derivative
        support in TFormula using clad::hessian.  The PR that added support for
        gradients in ROOT is taken as a reference and can be accessed here.
      proposal: /assets/docs/Baidyanath_Kundu_Proposal_2021.pdf
      mentors: Vassil Vassilev, Ioana Ifrim
      report: |
        [Final Report](/assets/docs/Garima_Singh_GSoC21_Report.pdf)

- name: Yuquan (Fred) Fu
  info: "GSoC student 2023"
  photo: FF.jpg
  email: me@syntaxforge.net
  education: PhD Student in Computer Science, Indiana Unveristy
  projects:
    - title: "Code Completion in ClangRepl"
      status: Completed
      description: |
          Clang-REPL enables developers to program in C++ in an exploratory
          manner via a read-eval-print-loop. Developers, however, have to type
          each letter or symbol in the REPL, which likely causes typos. The
          auto-completion we are proposing aims to assist developers in avoiding
          that laborious typing, and it is also type-directed in that completion
          candidates are well-typed with respect to cursor positions. The
          project incorporates the completion infrastructure of Cling into
          Clang-REPL. Next, we build components that handle type contexts and
          subtyping. Lastly, we combine the completion and type-related
          components to deliver the type-directed auto-completion in Clang-REPL.
      proposal: /assets/docs/FredFu_Proposal.pdf
      mentors: Vassil Vassilev
      report: |
        [Final Report](/assets/docs/Fred_Fu_GSoC2023_Report.pdf)

################################################################################
#                                     2022                                     #
################################################################################

- name: Sara Bellei
  info: "Google Season of Docs 2022"
  photo: Sara-Bellei.jpg
  email: sara.bellei.87@gmail.com
  education: "PhD in Physics, Politecnico University of Milan, Italy (2017)"
  projects:
    - title: "Improving the Clang-REPL documentation"
      status: Completed
      description: |
        Clang-REPL is the evolution of Cling, an interactive c++ interpreter
        based on LLVM and Clang. It first developed as part of the high-energy
        physics (HEP) data analysis project - ROOT, and subsequently grew as a
        standalone tool outisde the HEP community. The main goal behind the
        Clang-REPL project is to move most parts of Cling into LLVM. By doing
        so, the benefits of using the LLVM community standards for code reviews,
        release cycles and integration will ensure the software's
        sustainability, and will enable it to reach a wider audience. My goal is
        to establish a protocol for the Clang-REPL's documentation that will be
        easy to read from user's perspective, and easy to update as the codes
        continue to evolve.
      proposal: /assets/docs/Sara_Bellei_proposal_2022.pdf
      mentors: Vassil Vassilev, David Lange

- name: Surya Somayyajula
  info: "IRIS-HEP Fellow"
  photo: Surya-Somayyajula.jpg
  email: somayyajula@wisc.edu
  education: "Computer Sciences B.S., University of Wisconsin-Madison"
  projects:
    - title: "Improve Cling's packaging system: Cling Packaging Tool"
      status: Completed
      description: |
        Cling is an interactive C++ interpreter/compiler that utilizes the REPL
        (read-evaluate-print-loop) paradigm for fast development and testing as
        well as immediate feedback and runtime-generated code. One of the many
        useful tools included in the Cling interpreter is the Cling Packaging
        Tool (CPT), which is a command line utility that can easily build Cling
        from source and generate installer bundles for a variety of platforms,
        including Ubuntu and Debian-based platforms, Windows, distributions
        based on Red Hat Linux, Mac OS X, and any Unix-like platform. While the
        CPT is an incredibly useful and flexible tool, there are several
        improvements that can be made to make the user’s experience with the CPT
        even more seamless.
      proposal: /assets/docs/Surya_Somayyajula_Proposal.pdf
      report: |
        [Final Report](/assets/presentations/CaaS_Weekly_10_08_2022_Surya_Somayyajula_Improving_the_Cling_Packaging_Tool.pdf)
      mentors: Vassil Vassilev, David Lange

- name: Jun Zhang
  photo: Jun_Zhang.png
  info: "Research Intern, Google Summer of Code 2022 former contributor"
  email: jun@junz.org
  education: "Software Engineering, Anhui Normal University, WuHu, China"
  projects:
    - title: "Handle Execution Results in clang-repl"
      status: Completed
      description: |
        clang-repl is the upstream version of Cling Interpreter, which only
        implements a subset of features in Cling. In this proposal, we try to
        bring value printing, a very useful feature that enables users to know
        the detailed information of the expressions that users have inputted
      mentors: Vassil Vassilev, David Lange
      proposal: /assets/docs/Jun_Zhang_Proposal_2023.pdf
    - title: "Optimize ROOT use of modules for large codebases"
      status: Completed
      description: |
        ROOT is a data analysis framework designed to handle large amounts of
        data with high performance. This proposal aims at optimizing the
        performance of ROOT by reducing unnecessary symbol lookup across the
        very large set of C++ modules.
      mentors: Vassil Vassilev, David Lange, Alexander Penev
      proposal: /assets/docs/Jun_Zhang_Proposal_2022.pdf
      report: |
        [Final Report](/assets/docs/Jun_Zhang_GSoC22_Report.pdf)
        |
        [Blog post](https://hepsoftwarefoundation.org/gsoc/blogs/2022/blog_ROOT_JunZhang.html)

- name: Rohit Singh Rathaur
  photo: Rohit_Singh.png
  info: "Google Season of Docs 2022"
  email: rohitrathore.imh55@gmail.com
  education: "Mathematics & Computing, Birla Institute of Technology, Mesra, India"
  projects:
    - title: "Improving Interactive Tool Analysis Documentation for the HSF"
      status: Failed
      description: |
        HEP researchers have developed several unique software technologies in
        the area of data analysis. Over the last decade we developed an
        interactive, interpretative C++ interpreter (aka REPL) as part of the
        ROOT data analysis project. We invested a significant effort to replace
        CINT, the C++ interpreter used until ROOT5, with a newly implemented
        REPL based on LLVM Cling. Cling is a core component of ROOT and has been
        in production since 2014. Cling is also a standalone tool, which has a
        growing community outside of our field. It is recognized for enabling
        interactivity, dynamic interoperability and rapid prototyping
        capabilities for C++ developers. For example, if you are typing C++ in a
        Jupyter notebook you are using the xeus-cling Jupyter kernel. So we are
        in the midst of an important project to address one of the major
        challenges to ensure Clings sustainability and to foster that growing
        community: moving most parts of Cling into LLVM. Since LLVM version 13
        we have a version of Cling called Clang-Repl. As we advance the
        implementation and generalize its usage here we aim for improving the
        overall documentation experience in the area of interactive C++.
      proposal: /assets/docs/Rohit_Singh_Rathaur_proposal_2022.pdf
      mentors: Vassil Vassilev, David Lange

- name: Manish Kausik H
  photo: Manish_Kausik_H.jpg
  info: "Google Summer of Code 2022"
  email: hmanishkausik@gmail.com
  education: "B.Tech and M.Tech in Computer Science and Engineering(Dual Degree), Indian Institute of Technology Bhubaneswar"
  projects:
    - title: "Add Initial Integration of Clad with Enzyme"
      status: Completed
      description: |
        Clad is an open source plugin to the Clang compiler that detects from
        the parsed Abstract syntax tree, calls to differentiate a defined
        function, generates code that differentiates the function using the
        concept of Automatic Differentiation(AD) and modifies the Abstract
        Syntax Tree(AST) to insert the generated code. While clad works in the
        frontend of the compilation process, Enzyme, another LLVM based AD
        plugin works in the backend, where it takes in code in LLVM IR form and
        then differentiates the code. This proposal aims to integrate Clad with
        Enzyme, and give the user the option of selecting Enzyme for Automatic
        Differentiation, based on his/her needs. This will give the user the
        same User Interface as clad for writing his/her code, but the option of
        using Enzyme as the backend with all its optimisations to calculate the
        Derivative/Gradient of the requested function.  My proposal also briefly
        gives insights into how this can be achieved by tapping into the
        existing code base of Clad.

      mentors: Vassil Vassilev, David Lange
      proposal: /assets/docs/Manish_Kausik_H_Proposal_2022.pdf
      report: |
        [Final Report](/assets/docs/Manish_Kausik_H_GSoC22_Report.pdf)
        |
        [Blog post](https://hepsoftwarefoundation.org/gsoc/blogs/2022/blog_CompilerResearch-ManishKausik.html)

- name: "Tapasweni Pathak"
  info: "Principal Product Manager at Microsoft Azure Core Engineering"
  photo: tapaswenipathak.png
  email: tapaswenipathak@gmail.com
  education: B.Tech in Computer Science, Indira Gandhi Delhi Technical University for Women, 2014
  projects:
    - title: "Improving performance of C++ modules in Clang"
      status: Incomplete
      description: |
        The C++ modules technology aims to provide a scalable compilation model
        for the C++ language. The C++ Modules technology in Clang provides an
        io-efficient, on-disk representation capable to reduce build times and
        peak memory usage. The internal compiler state such as the abstract
        syntax tree (AST) is stored on disk and lazily loaded on demand. C++
        Modules improve the memory footprint for interpreted C++ through the
        Cling C++ interpreter developed by CERN and the compiler research group
        at Princeton. The current implementation is pretty good at making most
        operations on demand. However in a few cases, we eagerly load pieces of
        the AST, for example at module import time and upon selecting a suitable
        template specialization. When selecting the template specialization we
        load all template specializations from the module files just to find out
        they are not suitable. There is a patch that partially solves this issue
        by introducing a template argument hash and use it to look up the
        candidates without deserializing them. However, the data structure it
        uses to store the hashes leads to quadratic search which is inefficient
        when the number of modules becomes sufficiently large.
      proposal: /assets/docs/Tapasweni_Pathak_Proposal_2022.pdf
      mentors: Vassil Vassilev

- name: "Matheus Izvekov"
  info: Google Summer of Code Contributor 2022
  photo: mizvekov.jpg
  email: mizvekov@gmail.com
  education: Computer Science
  projects:
    - title: Preserve type sugar for member access on template specializations
      status: Complete
      description: |
        In C++, it's often useful to write wrappers that abstract or extend some
        underlying type passed as a template argument. But templates are only
        instantated taking into account the 'fundamental' types of the
        arguments, discarding 'type sugar', such as any aliases, attributes or
        other cosmetic metadata such as how the name of the type was qualified
        and such. While this ends up in practice being brittle to rely on,
        attributes on the type itself or a typedef thereof can have many
        interesting non-cosmetic effects, like changing data alignment, calling
        conventions, and other custom / domain specific functionality.  We refer
        to such 'fundamental' types as 'canonical' types here.  Without any
        further engineering to work around this limitation, member accesses on
        template specializations will only reflect these canonical types, with
        the simplest example being the loss of any sugar on the argument when
        acessing a member alias to the argument itself.  For this project, we
        will improve Clang's type system so that any type sugar on the arguments
        of a template specialization are pushed into those member accesses.
      proposal: /assets/docs/Matheus_Izvekov_Proposal_2022.pdf
      mentors: Vassil Vassilev, Richard Smith
      report: |
        [Final Report](/assets/docs/Matheus_Izvekov_GSoC22_Report.pdf)
        |
        [Blog post](https://compiler-research.org/blogs/gsoc22_izvekov_experience_blog/)

- name: "Parth Arora"
  photo: Parth.jpg
  email: partharora99160808@gmail.com
  education: "B.Tech in Computer Science, USICT, Guru Gobind Singh Indraprastha University, New Delhi, India"
  info: "IRIS-HEP Fellow"
  projects:
    - title: "Add support for custom types in Clad with a focus on the Softsusy library"
      status: Complete
      description: |
        User-defined types in C++ helps to make code more readable and
        maintainable.  Many user-defined programs and almost every major library
        uses user-defined types. Thus it is very crucial for clad to support
        differentiating user-defined types. The first goal of the project is to
        add support for differentiating user-defined types in clad. Clad
        currently also does not support many C++ syntaxes. Many of these are
        essential and are very well used in day-to-day programming such as break
        and continue statements. The second goal of the project is to battle
        test clad on Eigen and softsusy library codebases to find and add
        support for most of the missing syntax as well as to improve support for
        differentiating function calls.
      proposal: /assets/docs/Parth_Arora_Proposal_2022.pdf
      mentors: Vassil Vassilev, David Lange
      report: |
        [Final Report](/assets/presentations/CaaS_Weekly_06_04_22_Parth-Differentiation_of_Eigen_and_Softsusy_libraries_by_Clad_Progress.pdf)

    - title : 'Add support for differentiating functor objects in clad'
      status: Completed
      description: |
        Differentiation support for functions is available in clad. But support
        for direct differentiation of functors and lambda expressions is
        missing. Many computations are modelled using functors and functors and
        lambda expressions are becoming more and more relevant in modern
        C++. This project aims to add support for directly differentiating
        functors and lambda expressions in clad.
      proposal: /assets/docs/Parth_Arora_Proposal_2021.pdf
      mentors: Vassil Vassilev, David Lange
      report: |
        [Final Report](/assets/docs/Parth_Arora_GSoC21_Report.pdf)



################################################################################
#                                     2021                                     #
################################################################################

- name: "Ajay Uppili Arasanipalai"
  photo: Ajay.png
  info: Google Summer of Code Student 2021
  email: aua2@illinois.edu
  education: "University of Illinois at Urbana-Champaign, Grainger College of Engineering"
  projects:
    - title: 'Modernize the LLVM "Building A JIT" Tutorial Series'
      status: Failed
      description: |
        The LLVM JIT API has changed many times over the years. However, the
        official tutorials have failed to keep up. This project aims to update
        the official “Building a JIT” tutorials to use the latest version of the
        OrcJIT API and add new content that might be relevant to new LLVM users
        interested in writing their own JIT compilers.
      proposal: https://summerofcode.withgoogle.com/serve/6211919142191104/
      mentors: Lang Hames, Vassil Vassilev

- name: Purva Chaudhari
  info: "Research Intern"
  photo: Purva.jpg
  email: purva.chaudhari02@gmail.com
  education: "Computer Science, Vishwakarma Institute of Technology"
  projects:
    - title: "Enhance the incremental compilation error recovery in clang and clang-repl"
      status: Completed
      description: |
        The Clang compiler is part of the LLVM compiler infrastructure and
        supports various languages such as C, C++, ObjC and ObjC++. Advancements
        in JIT infstructure and usability of Clang libriries in LLVM has enabled
        research into processing C++. It has been challenging to include
        incremental compilation and fitting compile time optimizations into a
        more dynamic environment. Incremental compilation pipelines process code
        chunk-by-chunk by building an ever-growing translation unit. Code is
        then lowered into the LLVM IR and subsequently run by the LLVM JIT. The
        incremental compilation mode is used by the interactive C++ interpreter,
        Cling, initially developed to enable interactive high-energy physics
        analysis in a C++ environment. Clang-repl is a new-tool incroporated in
        LLVM ecosystem by residesigning parts of Cling in Clang mainline. The
        project aims at enhancing the error recovery when users type C++ at the
        prompt of clang-repl.
      mentors: Vassil Vassilev, David Lange

    - title: 'Reduce boost dependencies in CMSSW'
      status: Completed
      description: |
        This project has the objective to reduce CMSSW technical debt by finding
        and replacing boost dependencies that have an equivalent solution in
        standard C++. Reducing boost dependencies helps us create more
        lightweight boost clang modules for upcoming c++20. This also reduces
        the amount of headers that we need to work on to be able to use c++20
        clang modules.
      mentors: Vassil Vassilev, David Lange
      report: |
        [URL](https://indico.cern.ch/event/1066812/contributions/4495290/attachments/2302817/3917355/Iris%20HeP.pdf"){:target="_blank"}


################################################################################
#                                     2020                                     #
################################################################################

- name: Vaibhav Garg
  info: "Google Summer of Code Student 2020"
  email: gargvaibhav64@gmail.com
  education: "Computer Science, Birla Institute of Technology and Science, Pilani, India"
  projects:
    - title: "Enable Modules on Windows"
      status: Completed
      description: |
        ROOT has several features that interact with libraries and require
        implicit header inclusion. This can be triggered by reading or writing
        data on disk, or user actions at the prompt. Exposing the full shared
        library descriptors to the interpreter at runtime translates into an
        increased memory footprint.  ROOT’s exploratory programming concepts
        allow implicit and explicit runtime shared library loading. It requires
        the interpreter to load the library descriptor. Re-parsing of
        descriptors’ content has a noticeable effect on runtime performance. C++
        Modules are designed to minimize the reparsing of the same header
        content by providing an efficient on-disk representation of the C++
        Code. C++ Modules have been implemented for Unix and OS X systems
        already and it is expected that with next release of ROOT, C++ modules
        will be default on OS X. This project aims to extend the C++ Modules
        support for Windows, by implementing compatible solutions to the UNIX
        baseline and also display corresponding performance results.
      report: |
        [GSoC 2020 Archive](https://summerofcode.withgoogle.com/archive/2020/projects/6406031539699712/){:target="_blank"}
      mentors: Vassil Vassilev, Bertrand Bellenot

- name: Lucas Camolezi
  info: "Google Summer of Code Student 2020"
  email: camolezi@usp.br
  education: "Computer Engineering, University of São Paulo, Brazil"
  projects:
    - title: "Reduce boost dependence in CMSSW"
      status: Completed
      description: |
        This project has the goal to find and decrease boost dependencies in
        CMSSW.  Modern C++ introduced a lot of new features that were only
        available through boost packages. Thus, some boost code can be replaced
        with similar C++ standard library features. Using standard features is a
        good practice, this project will move the CMSSW codebase in that
        direction.
      report: |
        [GSoC 2020 Archive](https://summerofcode.withgoogle.com/archive/2020/projects/5397144158076928/){:target="_blank"}
      mentors: Vassil Vassilev, David Lange

- name: Roman Shakhov
  info: "Google Summer of Code Student 2020"
  email: r.intval@gmail.com
  education: "Mathematics and Computer Science, Voronezh State University, Russia"
  projects:
    - title: "Extend clad to compute Jacobians"
      description: |
        In mathematics and computer algebra, automatic differentiation (AD) is a
        set of techniques to numerically evaluate the derivative of a function
        specified by a computer program. Automatic differentiation is an
        alternative technique to Symbolic differentiation and Numerical
        differentiation (the method of finite differences). CLAD is based on
        Clang which will provide the necessary facilities for code
        transformation. The AD library is able to differentiate non-trivial
        functions, to find a partial derivative for trivial cases and has good
        unit test coverage.  Currently, clad does not provide an easy way to
        compute Jacobians.
      report: |
        [Poster](/assets/presentations/LLVM2020_Clad.pdf){:target="_blank"}
      mentors: Vassil Vassilev, Alexander Penev   
