- title: "Estimating Floating-Point Errors Using Automatic Differentiation"
  description: |
    Floating-point errors are a testament to the finite nature of computing 
    and if left uncontrolled they can have catastrophic results. As such, for 
    high-precision computing applications, quantifying these uncertainties 
    becomes imperative. There have been significant efforts to mitigate such 
    errors by either extending the underlying floating-point precision, using 
    alternate compensation algorithms or estimating them using a variety of 
    statistical and non-statistical methods. A prominent method of dynamic 
    floating-point error estimation is using Automatic Differentiation (AD).
    However, most state-of-the-art AD-based estimation software requires 
    manually adapting or annotating the source code by some amount. Moreover, 
    operator overloading AD based error estimation tools call for multiple 
    gradient recomputations to report errors over a large variety of inputs
    and suffer from all the shortcomings of the underlying operator 
    overloading strategy such as reduced efficiency. In this work, we propose 
    a customizable way to use AD to synthesize source code for estimating 
    uncertainties arising from floating-point arithmetic in C/C++ applications. 
    
    Our work presents an automatic error annotation framework that can be used 
    in conjunction with custom user defined error models. We also present our 
    progress with error estimation on GPU applications.

  location: "[SIAM UQ 2022](https://www.siam.org/conferences/cm/conference/uq22)"
  date: 2022-04-14
  speaker: V Vassilev, G Singh
  id: "FPErrorEstADSIAMUQ2022"
  artifacts: |
    [Video](https://www.youtube.com/watch?v=pndnawFPKHA&list=PLeZvkLnDkqbS8yQZ6VprODLKQVdL7vlTO&index=8),&nbsp;
    [Link to slides](/assets/presentations/G_Singh-SIAMUQ22_FP_Error_Estimation.pdf)
  highlight: 1

- title: "GPU Acceleration of Automatic Differentiation in C++ with Clad"
  description: |
    Automatic Differentiation (AD) is instrumental for science and industry. It
    is a tool to evaluate the derivative of a function specified through a
    computer program. The range of AD application domain spans from Machine
    Learning to Robotics to High Energy Physics. Computing gradients with the
    help of AD is guaranteed to be more precise than the numerical alternative
    and have at most a constant factor (4) more arithmetical operations compared
    to the original function. Moreover, AD applications to domain problems
    typically are computationally bound. They are often limited by the
    computational requirements of high-dimensional transformation parameters and
    thus can greatly benefit from parallel implementations on graphics
    processing units (GPUs).

    Clad aims to enable differentiable analysis for C/C++ and CUDA and is a
    compiler-assisted AD tool available both as a compiler extension and in
    ROOT. Moreover, Clad works as a compiler plugin extending the Clang
    compiler; as a plugin extending the interactive interpreter Cling; and as
    a Jupyter kernel extension based on xeus-cling.

    In this talk, we demonstrate the advantages of parallel gradient
    computations on graphics processing units (GPUs) with Clad. We explain how
    to bring forth a new layer of optimisation and a proportional speed up by
    extending the usage of Clad for CUDA. The gradients of well-behaved C++
    functions can be automatically executed on a GPU. Thus, across the spectrum
    of fields, researchers can reuse their existing models and have workloads
    scheduled on parallel processors without the need to optimize their
    computational kernels. The library can be easily integrated into existing
    frameworks or used interactively, and provides optimal performance.
    Furthermore, we demonstrate the achieved application performance
    improvements, including (~10x) in ROOT histogram fitting and corresponding
    performance gains from offloading to GPUs.

  location: "[ACAT 2021](https://indico.cern.ch/event/855454)"
  date: 2021-11-30
  speaker: I Ifrim
  id: "CppADCudaACAT21"
  artifacts: |
    [Video](https://videos.cern.ch/record/2295042),&nbsp;
    [Link to slides](/assets/presentations/I_Ifrim-ACAT21_GPU_AD.pdf)
  highlight: 1

- title: "Enabling Interactive C++ with Clang"
  description: |
    The design of LLVM and Clang enables them to be used as libraries, and has
    led to the creation of an entire compiler-assisted ecosystem of tools. The
    relatively friendly codebase of Clang and advancements in the JIT
    infrastructure in LLVM further enable research into different methods for
    processing C++ by blurring the boundary between compile time and runtime.
    Challenges include incremental compilation and fitting compile/link time
    optimizations into a more dynamic environment.

    Incremental compilation pipelines process code chunk-by-chunk by building an
    ever-growing translation unit. Code is then lowered into the LLVM IR and
    subsequently run by the LLVM JIT. Such a pipeline allows creation of
    efficient interpreters. The interpreter enables interactive exploration and
    makes the C++ language more user friendly. The incremental compilation mode
    is used by the interactive C++ interpreter, Cling, initially developed to
    enable interactive high-energy physics analysis in a C++ environment. Cling
    is now used for interactive development in Jupyter Notebooks
    (via xeus-cling), dynamic python bindings (via cppyy) and interactive CUDA
    development.

    In this talk we dive into the details of implementing incremental
    compilation with Clang. We outline a path forward for `Clang-Repl` which is
    built with the experience gained in Cling and is now available in mainstream
    llvm. We describe how the new Orc JIT infrastructure allows us to naturally
    perform static optimizations at runtime, and enables linker voodoo to make
    the compiler/interpreter boundaries disappear. We explain the potential of
    having a compiler-as-a-service architecture in the context of automatic
    language interoperability for Python and beyond.
  location: "[LLVM Developers' Meeting 2021](https://llvm.swoogo.com/2021devmtg/)"
  date: 2021-11-17
  speaker: V Vassilev
  id: "InteractiveCppLLVMDev21"
  artifacts: |
    [Video](https://youtu.be/33ncbIQoa4c),&nbsp;
    [Link to slides](/assets/presentations/V_Vassilev-LLVMDev21_InteractiveCpp.pdf)
  highlight: 1

- title: "Enabling Interactive C++ with Clang"
  description: |
    Clad enables automatic differentiation (AD) for C++ algorithms through
    source-to-source transformation. It is based on LLVM compiler infrastructure
    and as a Clang compiler plugin. Different from other tools, Clad manipulates
    the high-level code representation (the AST) rather than implementing its
    own C++ parser and does not require modifications to existing code bases.
    This methodology is both easier to adopt and potentially more performant
    than other approaches. Having full access to the Clang compiler's internals
    means that Clad is able to follow the high-level semantics of algorithms and
    can perform domain-specific optimisations; automatically generate code
    (re-targeting C++) on accelerator hardware with appropriate scheduling;
    and has a direct connection to compiler diagnostics engine and thus
    producing precise and expressive diagnostics positioned at desired source
    locations.

    In this talk, we showcase the above mentioned advantages through examples
    and outline Clad&#8217;s features, applications and support extensions. We
    describe the challenges coming from supporting automatic differentiation of
    broader C++ and present how Clad can compute derivatives of functions,
    member functions, functors and lambda expressions. We show the newly added
    support of array differentiation which provides the basis utility for CUDA
    support and parallelisation of gradient computation. Moreover, we will demo
    different interactive use-cases of Clad, either within a Jupyter environment
    as a kernel extension based on xeus-cling or within a gpu-cpu environment
    where the gradient computation can be accelerated through gpu-code produced
    by Clad and run with the help of the Cling interpreter.

  location: "[24th EuroAD Workshop 2021](http://www.autodiff.org/?module=Workshops&submenu=EuroAD%2F24%2Fprogramme)"
  date: 2021-11-04
  speaker: I Ifrim
  id: "CppADCudaEuroAD21"
  artifacts: "[Link to slides](/assets/presentations/I_Ifrim-EuroAD21_GPU_AD.pdf)"
  highlight: 1

- title: "Interactive C++ for Data Science"
  description: |
    C++ is used for many numerically intensive applications. A combination of
    performance and solid backward compatibility has led to its use for many
    research software codes over the past 20 years. Despite its power, C++ is
    often seen as difficult to learn and not well suited with rapid application
    development. The long edit-compile-run cycle is a large impediment to
    exploration and prototyping during development.

    Cling has emerged as a recognized capability that enables interactivity,
    dynamic interoperability and rapid prototyping capabilities for C++
    developers. Cling is an interactive C++ interpreter, built on top of the
    Clang and LLVM compiler infrastructure. The interpreter enables interactive
    exploration and makes the C++ language more welcoming for research. Cling
    supports the full C++ feature set including the use of templates, lambdas,
    and virtual inheritance.Clingâ€™s field of origin is the field of high energy
    physics where it facilitates the processing of scientific data. The
    interpreter was an essential part of the software tools of the LHC
    experimental program and was part of the software used to detect the
    gravitational waves of the LIGO experiment. Interactive C++ has proven to be
    useful for other communities. The Cling ecosystem includes dynamic bindings
    tools to languages including python, D and Julia (cppyy); C++ in Jupyter
    Notebooks (xeus-cling); interactive CUDA; and automatic differentiation on
    the fly (clad).

    This talk outlines key properties of interactive C++ such as execution
    results, entity redefinition, error recovery and code undo. It demonstrates
    the capability enabled by an interactive C++ platform in the context of data
    science. For example, the use of eval-style programming, C++ in Jupyter
    notebooks and CUDA C++. We talk about design and implementation challenges
    and go beyond just interpreting C++. We showcase template instantiation on
    demand, language interoperability on demand and bridging compiled and
    interpreted code. We show how to easily build new capabilities using the
    Cling infrastructure through developing an automatic differentiation plugin
    for C++ and CUDA.
  location: "[CppCon21](https://cppcon.org/program2021/)"
  date: 2021-10-27
  speaker: V Vassilev
  id: "InteractiveCppCppCon21"
  artifacts: |
    [Video](https://youtu.be/23E0S3miWB0),&nbsp;
    [Link to slides](/assets/presentations/V_Vassilev-CppCon21_InteractiveCpp.pdf)
  highlight: 1

- title: "Differentiable Programming in C++"
  description: |
    Mathematical derivatives are vital components of many computing algorithms
    including: neural networks, numerical optimization, Bayesian inference,
    nonlinear equation solvers, physics simulations, sensitivity analysis, and
    nonlinear inverse problems. Derivatives track the rate of change of an
    output parameter with respect to an input parameter, such as how much
    reducing an individualsâ€™ carbon footprint will impact the Earthâ€™s
    temperature. Derivatives (and generalizations such as gradients, jacobians,
    hessians, etc) allow us to explore the properties of a function and better
    describe the underlying process as a whole. In recent years, the use of
    gradient-based optimizations such as training neural networks have become
    widespread, leading to many languages making differentiation a first-class
    citizen.

    Derivatives can be computed numerically, but unfortunately the accumulation
    of floating-point errors and high-computational complexity presents several
    challenges. These problems become worse with higher order derivatives and
    more parameters to differentiate.

    Many derivative-based algorithms require gradients, or the computation of
    the derivative of an output parameter with respect to many input parameters.
    As such, developing techniques for computing gradients that are scalable in
    the number of input parameters is crucial for the performance of such
    algorithms. This paper describes a broad set of domains where scalable
    derivative computations are essential. We make an overview of the major
    techniques in computing derivatives, and finally, we introduce the flagman
    of computational differential calculus -- algorithmic (also known as
    automatic) differentiation (AD). AD makes clever use of the â€˜niceâ€™
    mathematical properties of the chained rule and generative programming to
    solve the scalability issues by inverting the dependence on the number of
    input variables to the number of output variables. AD provides mechanisms to
    augment the regular function computation with instructions calculating its
    derivatives.

    Differentiable programming is a programming paradigm in which the programs
    can be differentiated throughout, usually via automatic differentiation.
    This talk introduces the differentiable programming paradigm in terms of
    C++. It shows its applications in science as applicable for data science
    and industry. The authors make an overview of the existing tools in the area
    and the two common implementation approaches -- template metaprogramming and
    custom parsers. We demonstrate implementation pros and cons and propose
    compiler toolchain-based implementation either in clang AST or LLVM IR. We
    would like to briefly outline our current efforts in standardization of that
    feature.
  location: "[CppCon21](https://cppcon.org/program2021/)"
  date: 2021-10-26
  speaker: "W Moses, V Vassilev"
  id: DifferentiableProgrammingInCppCppCon21
  artifacts: |
    [Video](https://youtu.be/1QQj1mAV-eY),&nbsp;
    [Link to slides](/assets/presentations/W_Moses_V_Vassilev-CppCon21_DifferentiableProgrammingInCpp.pdf)
  highlight: 1

- title: "Add Numerical Differentiation Support To Clad"
  description:
  location: "[IRIS-HEP GSoC presentations meeting](https://indico.cern.ch/event/1066812/)"
  date: 2021-09-01
  speaker: G Singh
  artifacts: "[Link to slides](https://indico.cern.ch/event/1066812/contributions/4495279/attachments/2301763/3915404/Numerical%20Differentiaition%20.pdf)"

- title: "Floating point error estimation using Clad -- Final Report"
  description:
  location: "[IRIS-HEP topical meeting](https://indico.cern.ch/event/1040761/)"
  date: 2021-06-21
  speaker: G Singh
  artifacts: "[Link to slides](https://indico.cern.ch/event/1040761/contributions/4371613/attachments/2268248/3851583/floating_point_error_est.pdf)"

- title: "Utilise Second Order Derivatives from Clad in ROOT"
  description:
  location: "[IRIS-HEP GSoC presentations meeting](https://indico.cern.ch/event/1066812/)"
  date: 2021-09-01
  speaker: B Kundu
  artifacts: "[Link to slides](https://indico.cern.ch/event/1066812/contributions/4509414/attachments/2301766/3915408/Utilize%20second%20order%20derivatives%20from%20Clad%20in%20ROOT.pdf)"
  
- title: "Add support for differentiating functors"
  description:
  location: "[IRIS-HEP GSoC presentations meeting](https://indico.cern.ch/event/1066812/)" 
  date: 2021-09-01
  speaker: P Arora
  artifacts:
    - "[presentation](https://indico.cern.ch/event/1066812/contributions/4485920/attachments/2301761/3915402/IRIS-HEP-Add-support-for-differentiating-functors-presentation.pdf), "
    - "[Poster](/assets/presentations/add-support-for-differentiating-functors-poster.pdf)"

- title: "GPU Acceleration of Automatic Differentiation in C++ with Clad"
  description:
  location: "[IRIS-HEP topical meeting](https://indico.cern.ch/event/1040761/)"
  date: 2021-06-21
  speaker: I Ifrim
  artifacts: "[Link to slides](https://indico.cern.ch/event/1040761/contributions/4400258/attachments/2268253/3851595/Ioana%20Ifrim%20-%20GPU%20Acceleration%20of%20Automatic%20Differentiation%20in%20C%2B%2B%20with%20Clad.pdf)"

- title: "Floating point error estimation using Clad -- Project Roadmap"
  location: "Onboarding meetup"
  speaker: G Singh
  date: 2020-12-15
  description: 
  artifacts:
    - "[pdf](/assets/presentations/ErrorEstimationWithClad_15_12_2020.pdf), " 
    - "[pptx](/assets/presentations/ErrorEstimationWithClad_15_12_2020.pptx)"

- title: "Adding CUDAÂ® Support to Cling: JIT Compile to GPUs"
  description: My abstract
  location: "[2020 LLVM workshop](https://llvm.org/devmtg/2020-09/)"
  speaker: S Ehrig
  date: 2020-10-08
  artifacts: "[Link to slides and video](https://zenodo.org/record/4021877)"

- title: "Error estimates of floating-point numbers and Jacobian matrix computation in Clad"
  location: "[2020 LLVM workshop](https://llvm.org/devmtg/2020-09/)"
  speaker: V Vassilev
  date: 2020-10-07
  artifacts: "[Link to poster](/assets/presentations/LLVM2020_Clad.pdf)"

- title: "Incremental Compilation Support in Clang"
  description: My abstract
  location: "[2020 LLVM workshop](https://llvm.org/devmtg/2020-09/)"
  date: 2020-10-07
  speaker: V Vassilev 
  artifacts: "[Link to poster](/assets/presentations/LLVM2020_CaaS.pdf)"

- title: "Modernizing Boost in CMSSW"
  description:
  location: "[IRIS-HEP topical meeting](https://indico.cern.ch/event/945364)"
  date: 2020-09-02
  speaker: L Camolezi
  artifacts: "[Link to slides](https://indico.cern.ch/event/945364/contributions/3992254/attachments/2095731/3522488/cmssw-finalpresentation.pdf)"

- title: "Enabling C++ Modules for ROOT on Windows"
  description:
  location: "[IRIS-HEP topical meeting](https://indico.cern.ch/event/950229/)"
  date: 2020-09-08
  speaker: V Garg
  artifacts: "[Link to slides](/assets/presentations/WinCXXModules_31_08_2020.pdf)"

- title: "Clad -- Automatic Differentiation in C++ and Clang"
  description:
  location: "[23rd Euro AD workshop](http://www.autodiff.org/?module=Workshops&submenu=EuroAD/23/main)"
  date: 2020-08-11
  speaker: V Vassilev
  artifacts: "[Link to talk](http://www.autodiff.org/Docs/euroad/23rd%20EuroAd%20Workshop%20-%20Vassil%20Vassilev%20-%20Clad%20--%20Automatic%20Differentiation%20in%20C++%20and%20Clang.pdf)"

- title: "CaaS poster for 2020 NSF CSSI PI meeting"
  description: Our compiler as a service project contribution to the 2020 NSF CSSI PI meeting.
  location: "[2020 NSF CSSI meeting, Seattle, WA](https://cssi-pi-community.github.io/2020-meeting)"
  date: 2020-02-13
  speaker: D Lange
  artifacts: "[Link to poster](/assets/presentations/CSSI2020_poster.pdf)"

- title: "CaaS slide for 2020 NSF CSSI PI meeting"
  description: Our compiler as a service project contribution to the 2020 NSF CSSI PI meeting.
  location: "[2020 NSF CSSI meeting, Seattle, WA](https://cssi-pi-community.github.io/2020-meeting)"
  date: 2020-02-13
  speaker: D Lange
  artifacts: "[Link to slides](/assets/presentations/CSSI2020_slide.pdf)"

- title: "Automatic Differentiation in C++"
  description:
  location: Prague 2020 ISO C++ WG21 meeting
  date: 2020-02-10
  speaker: V Vassilev and M Foco (NVIDIA)
  artifacts: "[Link to slides](/assets/presentations/CladInROOT_15_02_2020.pdf)"

- title: "C++ Modules in ROOT and Beyond"
  description: 
  location: "[2019 CHEP International Conference](chep2019.org)"
  date: 2019-11-07
  speaker: O Shadura
  artifacts: "[Link to slides](https://indico.cern.ch/event/773049/contributions/3473264/attachments/1937517/3215659/C_Modules_in_ROOT_and_Beyond4.pdf)"

- title: "Clad: the automatic differentiation plugin for Clang"
  description: 
  location: "[IRIS-HEP topical meeting](https://indico.cern.ch/event/815976/)"
  date: 2019-05-29
  speaker: A Efremov
  artifacts: "[Link to slides](https://indico.cern.ch/event/815976/contributions/3405951/attachments/1853315/3043286/CladIRIS.pdf)"

- title: "Future of ROOT runtime C++ modules"
  description:
  location: "[ROOT Users Workshop (Sarajevo)](https://indico.cern.ch/event/697389/)"
  date: 2018-09-12
  speaker: Y Takahashi
  artifacts: "[Link to slides](https://indico.cern.ch/event/697389/contributions/3062026/attachments/1714046/2764895/Future_of_ROOT_runtime_C_modules.pdf)"

- title: "Optimizing Frameworks Performance Using C++ Modules-Aware ROOT"
  description:
  location: "[Computing in High Energy Physics (CHEP 2018, Sofia)](https://indico.cern.ch/event/587955/)"
  date: 2018-07-10
  speaker: Y Takahashi
  artifacts: "[Link to poster](https://indico.cern.ch/event/587955/contributions/2937639/attachments/1679562/2697775/CHEP_poster_third.pdf)"

- title: "Migrating large codebases to C++ Modules"
  description:
  location: "[19th International Workshop on Advanced Computing and Analysis Techniques in Physics Research (ACAT 2019 Saas-Fee)](https://indico.cern.ch/event/708041/)"
  date: 2019-03-13
  speaker: Y Takahashi
  artifacts: "[Link to slides](https://indico.cern.ch/event/708041/contributions/3276196/attachments/1810525/3007180/ACAT_CModules.pdf)"

- title: "DIANA-HEP Final Presentation Runtime C++ modules"
  description:
  location: "[DIANA-HEP Topical meeting](https://indico.cern.ch/event/798499)"
  date: 2019-02-18
  speaker: Y Takahashi
  artifacts: "[Link to slides](https://indico.cern.ch/event/798499/contributions/3318311/attachments/1797966/2931691/DIANA_Yuka_final.pdf)"

- title: "Implementation of GlobalModuleIndex in ROOT and Cling"
  description:
  location: "[IRIS-HEP Topical meeting](https://indico.cern.ch/event/840376)"
  speaker: A Raghunandan
  date: 2019-08-21
  artifacts: "[Link to slides](https://indico.cern.ch/event/840376/contributions/3525646/attachments/1895398/3127159/GSoC_Presentation__GMI.pdf)"

- title: "Clad - Clang plugin for Automatic Differentiation"
  description:
  location: "[IRIS-HEP Topical meeting](https://indico.cern.ch/event/840376)"
  speaker: J Qiu
  date: 2019-08-21
  artifacts: "[Link to slides](https://indico.cern.ch/event/840376/contributions/3527105/attachments/1895396/3126873/Clad_-_Clang_plugin_for_Automatic_Differentiation_1.pdf)"

- title: "Automatic Differentiation in ROOT"
  description:
  location: "[Computing in High Energy Physics (CHEP 2019, Adeliade)](http://chep2019.org)"
  date: 2019-11-05
  speaker: O Shadura
  artifacts: "[Link to slides](https://indico.cern.ch/event/773049/contributions/3474747/attachments/1935465/3212004/Automatic_Differentiation_in_ROOT3.pdf)"

- title: "C++ Modules in ROOT"
  description:
  location: "[DIANA-HEP topical meeting](https://indico.cern.ch/event/682267/)"
  date: 2017-12-04
  speaker: R Isemann
  artifacts: "[Link to slides](https://indico.cern.ch/event/682267/contributions/2795954/attachments/1569847/2475832/Runtime_C_Modules_presentation.pdf)"

- title: "ROOT C++ Modules"
  description:
  location: "[DIANA-HEP topical meeting](https://indico.cern.ch/event/643728/)"
  date: 2017-07-17
  speaker: R Isemann
  artifacts: "[Link to slides](https://indico.cern.ch/event/643728/contributions/2612822/attachments/1494074/2323893/ROOTs_C_modules_status_report.pdf)"
