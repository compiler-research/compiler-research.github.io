- name: "Garima Singh"
  photo: Garima_Singh.jpg
  info: "Floating point error evaluation with Clad"
  email: garimasingh0028@gmail.com
  education: "B. Tech in Information Technology, Manipal Institute of Technology, Manipal, India"
  description: |
    Floating-point estimation errors have been a testament to the finite nature
    of computing. Moreover, the predominance of Floating-point numbers in
    real-valued computation does not help that fact. Float computations are
    highly dependent on precision, and in most cases, very high precision
    calculation is not only not possible but very inefficient. Here, one has no
    choice but to resort to lower precision computing, which in turn is quite
    prone to errors. These errors result in inaccurate and sometimes
    catastrophic results; hence, it is imperative to estimate these errors
    accurately. This project aims to use Clad, a source transformation AD tool
    for C++ implemented as a plugin for the C++ compiler Clang, to develop a
    generic error estimation framework that is not bound to a particular error
    approximation model. It will allow users to select their preferable
    estimation logic and automatically generate functions augmented with code
    for the specified error estimator.
  proposal: /assets/docs/Garima_Singh_Proposal_2020.pdf
  mentors: Vassil Vassilev, David Lange
  current: 1

- name: "Ajay Uppili Arasanipalai"
  photo: Ajay.png
  info: 'Modernize the LLVM "Building A JIT" Tutorial Series'
  email: aua2@illinois.edu
  education: "University of Illinois at Urbana-Champaign, Grainger College of Engineering"
  description: |
    The LLVM JIT API has changed many times over the years. 
    However, the official tutorials have failed to keep up. 
    This project aims to update the official “Building a JIT” tutorials to use 
    the latest version of the OrcJIT API and add new content that might be relevant 
    to new LLVM users interested in writing their own JIT compilers.
  proposal: https://summerofcode.withgoogle.com/serve/6211919142191104/
  mentors: Lang Hames, Vassil Vassilev
  current: 1

- name: "Parth Arora"
  photo: Parth.jpg
  info: 'Add support for differentiating functor objects in clad'
  email: partharora99160808@gmail.com
  education: "B.Tech in Computer Science, USICT, Guru Gobind Singh Indraprastha University, New Delhi, India"
  description: |
    Differentiation support for functions is available in clad. But support for direct
    differentiation of functors and lambda expressions is missing. Many computations are
    modelled using functors and functors and lambda expressions are becoming more and
    more relevant in modern C++. This project aims to add support for directly differentiating 
    functors and lambda expressions in clad.
  proposal: /assets/docs/Parth_Arora_Proposal_2021.pdf
  mentors: Vassil Vassilev, David Lange
  current: 1

- name: "This could be you!"
  photo: rock.jpg
  info: See <a href="/vacancies">openings</a> for more info
  email: vvasilev@cern.ch
  current: 1

- name: Vaibhav Garg
  info: "Enable Modules on Windows, GSoC 2020"
  email: gargvaibhav64@gmail.com
  education: "Computer Science, Birla Institute of Technology and Science, Pilani, India"
  description: |
    ROOT has several features that interact with libraries and require implicit
    header inclusion. This can be triggered by reading or writing data on disk,
    or user actions at the prompt. Exposing the full shared library descriptors
    to the interpreter at runtime translates into an increased memory footprint.
    ROOT’s exploratory programming concepts allow implicit and explicit runtime
    shared library loading. It requires the interpreter to load the library
    descriptor. Re-parsing of descriptors’ content has a noticeable effect on
    runtime performance. C++ Modules are designed to minimize the reparsing of
    the same header content by providing an efficient on-disk representation of
    the C++ Code. C++ Modules have been implemented for Unix and OS X systems
    already and it is expected that with next release of ROOT, C++ modules will
    be default on OS X. This project aims to extend the C++ Modules support for
    Windows, by implementing compatible solutions to the UNIX baseline and also
    display corresponding performance results.
  report: <a href="https://summerofcode.withgoogle.com/archive/2020/projects/6406031539699712/" target="_blank">GSoC 2020 Archive</a>
  mentors: Vassil Vassilev, Bertrand Bellenot

- name: Lucas Camolezi
  info: "Reduce boost dependence in CMSSW, GSoC 2020"
  email: camolezi@usp.br
  education: "Computer Engineering, University of São Paulo, Brazil"
  description: |
    This project has the goal to find and decrease boost dependencies in CMSSW.
    Modern C++ introduced a lot of new features that were only available through
    boost packages. Thus, some boost code can be replaced with similar C++
    standard library features. Using standard features is a good practice, this
    project will move the CMSSW codebase in that direction.
  report: <a href="https://summerofcode.withgoogle.com/archive/2020/projects/5397144158076928/" target="_blank">GSoC 2020 Archive</a>
  mentors: Vassil Vassilev, David Lange

- name: Roman Shakhov
  info: "Extend clad to compute Jacobians, GSoC 2020"
  email: r.intval@gmail.com
  education: "Mathematics and Computer Science, Voronezh State University, Russia"
  description: |
    In mathematics and computer algebra, automatic differentiation (AD) is a
    set of techniques to numerically evaluate the derivative of a function
    specified by a computer program. Automatic differentiation is an alternative
    technique to Symbolic differentiation and Numerical differentiation (the
    method of finite differences). CLAD is based on Clang which will provide the
    necessary facilities for code transformation. The AD library is able to
    differentiate non-trivial functions, to find a partial derivative for trivial
    cases and has good unit test coverage.
    Currently, clad does not provide an easy way to compute Jacobians.
  report: <a href="/assets/presentations/LLVM2020_Clad.pdf" target="_blank">Poster</a>
  mentors: Vassil Vassilev, Alexander Penev
